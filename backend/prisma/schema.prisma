generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id Int @id @default(autoincrement())
  name String @unique
  password String
}

model Teacher {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  language String

  studentProgressReportEntries StudentProgressReportEntry[] @relation("TeacherEmail")
  levelCheckEntries LevelCheckEntry[] @relation("TeacherEmail")

  students StudentTeacher[]
  createdAt DateTime @default(now())

}

model Student {
  id String @id @default(uuid())
  email String @unique
  name String
  nickname String
  createdAt DateTime @default(now())
  teachers StudentTeacher[]

  levelCheckEntries LevelCheckEntry[]
  studentProgressReportEntry StudentProgressReportEntry[]

}

model StudentProgressReportEntry {
  id String @id @default(uuid())
  studentName String?
  language String?
  course String?
  textbook String?
  attendance Int?
  totalLessons Int?
  feedback String?
  dateCreated DateTime @default(now())

  vocabularyInitial String?
  vocabularyTarget String?
  vocabularyFinal String?

  grammarInitial String?
  grammarTarget String?
  grammarFinal String?

  listeningInitial String?
  listeningTarget String?
  listeningFinal String?

  speakingInitial String?
  speakingTarget String?
  speakingFinal String?

  pronunciationInitial String?
  pronunciationTarget String?
  pronunciationFinal String?

  teacherEmail String
  teacher Teacher @relation("TeacherEmail", fields: [teacherEmail], references: [email])

  studentId String
  student Student @relation(fields: [studentId], references: [id])

}

model LevelCheckEntry {
  id String @id @default(uuid())
  name String
  language String
  teacherName String

  speakingNameEntry String
  speakingScore String
  speakingStrength String[]
  speakingWeakness String[]

  confidenceName_entry String
  confidenceScore String
  confidenceStrength String[]
  confidenceWeakness String[]

  vocabularyEntry String
  vocabularyScore String
  vocabularyStrength String[]
  vocabularyWeakness String[]


  grammarNameEntry String
  grammarScore String
  grammarStrength String[]
  grammarWeakness String[]

  listeningNameEntry String
  listeningScore String
  listeningStrength String[]
  listeningWeakness String[]

  pronunciationNameEntry String  
  pronunciationScore String
  pronunciationStrength String[]
  pronunciationWeakness String[]

  feedback String
  
  teacherEmail String
  teacher Teacher @relation("TeacherEmail", fields: [teacherEmail], references: [email])

  studentId String
  student Student @relation(fields: [studentId], references: [id])

}

model StudentTeacher {
  id Int @id @default(autoincrement())
  studentId String
  teacherEmail String
  assignedAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherEmail], references: [email])

  @@unique([studentId, teacherEmail]) 
}